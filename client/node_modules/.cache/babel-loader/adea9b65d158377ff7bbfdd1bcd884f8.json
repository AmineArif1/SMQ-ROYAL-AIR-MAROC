{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n'use strict';\n\nconst OctetStreamParser = require('../parsers/OctetStream'); // the `options` is also available through the `options` / `formidable.options`\n\n\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/octet-stream/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n}; // Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\n\n\nfunction init(_self, _opts) {\n  this.type = 'octet-stream';\n  const originalFilename = this.headers['x-file-name'];\n  const mimetype = this.headers['content-type'];\n  const thisPart = {\n    originalFilename,\n    mimetype\n  };\n\n  const newFilename = this._getNewName(thisPart);\n\n  const filepath = this._joinDirectoryName(newFilename);\n\n  const file = this._newFile({\n    newFilename,\n    filepath,\n    originalFilename,\n    mimetype\n  });\n\n  this.emit('fileBegin', originalFilename, file);\n  file.open();\n  this.openedFiles.push(file);\n  this._flushing += 1;\n  this._parser = new OctetStreamParser(this.options); // Keep track of writes that haven't finished so we don't emit the file before it's done being written\n\n  let outstandingWrites = 0;\n\n  this._parser.on('data', buffer => {\n    this.pause();\n    outstandingWrites += 1;\n    file.write(buffer, () => {\n      outstandingWrites -= 1;\n      this.resume();\n\n      if (this.ended) {\n        this._parser.emit('doneWritingFile');\n      }\n    });\n  });\n\n  this._parser.on('end', () => {\n    this._flushing -= 1;\n    this.ended = true;\n\n    const done = () => {\n      file.end(() => {\n        this.emit('file', 'file', file);\n\n        this._maybeEnd();\n      });\n    };\n\n    if (outstandingWrites === 0) {\n      done();\n    } else {\n      this._parser.once('doneWritingFile', done);\n    }\n  });\n\n  return this;\n}","map":{"version":3,"names":["OctetStreamParser","require","module","exports","plugin","formidable","options","self","test","headers","init","call","_self","_opts","type","originalFilename","mimetype","thisPart","newFilename","_getNewName","filepath","_joinDirectoryName","file","_newFile","emit","open","openedFiles","push","_flushing","_parser","outstandingWrites","on","buffer","pause","write","resume","ended","done","end","_maybeEnd","once"],"sources":["C:/Users/killua/local/pc/Bureau/SMQ-ROYAL-AIR-MAROC/client/node_modules/formidable/src/plugins/octetstream.js"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst OctetStreamParser = require('../parsers/OctetStream');\n\n// the `options` is also available through the `options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/octet-stream/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'octet-stream';\n  const originalFilename = this.headers['x-file-name'];\n  const mimetype = this.headers['content-type'];\n\n  const thisPart = {\n    originalFilename,\n    mimetype,\n  };\n  const newFilename = this._getNewName(thisPart);\n  const filepath = this._joinDirectoryName(newFilename);\n  const file = this._newFile({\n    newFilename,\n    filepath,\n    originalFilename,\n    mimetype,\n  });\n\n  this.emit('fileBegin', originalFilename, file);\n  file.open();\n  this.openedFiles.push(file);\n  this._flushing += 1;\n\n  this._parser = new OctetStreamParser(this.options);\n\n  // Keep track of writes that haven't finished so we don't emit the file before it's done being written\n  let outstandingWrites = 0;\n\n  this._parser.on('data', (buffer) => {\n    this.pause();\n    outstandingWrites += 1;\n\n    file.write(buffer, () => {\n      outstandingWrites -= 1;\n      this.resume();\n\n      if (this.ended) {\n        this._parser.emit('doneWritingFile');\n      }\n    });\n  });\n\n  this._parser.on('end', () => {\n    this._flushing -= 1;\n    this.ended = true;\n\n    const done = () => {\n      file.end(() => {\n        this.emit('file', 'file', file);\n        this._maybeEnd();\n      });\n    };\n\n    if (outstandingWrites === 0) {\n      done();\n    } else {\n      this._parser.once('doneWritingFile', done);\n    }\n  });\n\n  return this;\n}\n"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,wBAAD,CAAjC,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,UAAhB,EAA4BC,OAA5B,EAAqC;EACpD;EACA;;EAEA;EACA,MAAMC,IAAI,GAAG,QAAQF,UAArB;;EAEA,IAAI,gBAAgBG,IAAhB,CAAqBD,IAAI,CAACE,OAAL,CAAa,cAAb,CAArB,CAAJ,EAAwD;IACtDC,IAAI,CAACC,IAAL,CAAUJ,IAAV,EAAgBA,IAAhB,EAAsBD,OAAtB;EACD;;EAED,OAAOC,IAAP;AACD,CAZD,C,CAcA;AACA;AACA;;;AACA,SAASG,IAAT,CAAcE,KAAd,EAAqBC,KAArB,EAA4B;EAC1B,KAAKC,IAAL,GAAY,cAAZ;EACA,MAAMC,gBAAgB,GAAG,KAAKN,OAAL,CAAa,aAAb,CAAzB;EACA,MAAMO,QAAQ,GAAG,KAAKP,OAAL,CAAa,cAAb,CAAjB;EAEA,MAAMQ,QAAQ,GAAG;IACfF,gBADe;IAEfC;EAFe,CAAjB;;EAIA,MAAME,WAAW,GAAG,KAAKC,WAAL,CAAiBF,QAAjB,CAApB;;EACA,MAAMG,QAAQ,GAAG,KAAKC,kBAAL,CAAwBH,WAAxB,CAAjB;;EACA,MAAMI,IAAI,GAAG,KAAKC,QAAL,CAAc;IACzBL,WADyB;IAEzBE,QAFyB;IAGzBL,gBAHyB;IAIzBC;EAJyB,CAAd,CAAb;;EAOA,KAAKQ,IAAL,CAAU,WAAV,EAAuBT,gBAAvB,EAAyCO,IAAzC;EACAA,IAAI,CAACG,IAAL;EACA,KAAKC,WAAL,CAAiBC,IAAjB,CAAsBL,IAAtB;EACA,KAAKM,SAAL,IAAkB,CAAlB;EAEA,KAAKC,OAAL,GAAe,IAAI7B,iBAAJ,CAAsB,KAAKM,OAA3B,CAAf,CAvB0B,CAyB1B;;EACA,IAAIwB,iBAAiB,GAAG,CAAxB;;EAEA,KAAKD,OAAL,CAAaE,EAAb,CAAgB,MAAhB,EAAyBC,MAAD,IAAY;IAClC,KAAKC,KAAL;IACAH,iBAAiB,IAAI,CAArB;IAEAR,IAAI,CAACY,KAAL,CAAWF,MAAX,EAAmB,MAAM;MACvBF,iBAAiB,IAAI,CAArB;MACA,KAAKK,MAAL;;MAEA,IAAI,KAAKC,KAAT,EAAgB;QACd,KAAKP,OAAL,CAAaL,IAAb,CAAkB,iBAAlB;MACD;IACF,CAPD;EAQD,CAZD;;EAcA,KAAKK,OAAL,CAAaE,EAAb,CAAgB,KAAhB,EAAuB,MAAM;IAC3B,KAAKH,SAAL,IAAkB,CAAlB;IACA,KAAKQ,KAAL,GAAa,IAAb;;IAEA,MAAMC,IAAI,GAAG,MAAM;MACjBf,IAAI,CAACgB,GAAL,CAAS,MAAM;QACb,KAAKd,IAAL,CAAU,MAAV,EAAkB,MAAlB,EAA0BF,IAA1B;;QACA,KAAKiB,SAAL;MACD,CAHD;IAID,CALD;;IAOA,IAAIT,iBAAiB,KAAK,CAA1B,EAA6B;MAC3BO,IAAI;IACL,CAFD,MAEO;MACL,KAAKR,OAAL,CAAaW,IAAb,CAAkB,iBAAlB,EAAqCH,IAArC;IACD;EACF,CAhBD;;EAkBA,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"script"}