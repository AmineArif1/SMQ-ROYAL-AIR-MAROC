{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n'use strict';\n\nconst {\n  Transform\n} = require('stream');\n\nconst querystring = require('querystring'); // This is a buffering parser, not quite as nice as the multipart one.\n// If I find time I'll rewrite this to be fully streaming as well\n\n\nclass QuerystringParser extends Transform {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      readableObjectMode: true\n    });\n    this.globalOptions = { ...options\n    };\n    this.buffer = '';\n    this.bufferLength = 0;\n  }\n\n  _transform(buffer, encoding, callback) {\n    this.buffer += buffer.toString('ascii');\n    this.bufferLength = this.buffer.length;\n    callback();\n  }\n\n  _flush(callback) {\n    const fields = querystring.parse(this.buffer, '&', '='); // eslint-disable-next-line no-restricted-syntax, guard-for-in\n\n    for (const key in fields) {\n      this.push({\n        key,\n        value: fields[key]\n      });\n    }\n\n    this.buffer = '';\n    callback();\n  }\n\n}\n\nmodule.exports = QuerystringParser;","map":{"version":3,"names":["Transform","require","querystring","QuerystringParser","constructor","options","readableObjectMode","globalOptions","buffer","bufferLength","_transform","encoding","callback","toString","length","_flush","fields","parse","key","push","value","module","exports"],"sources":["C:/Users/killua/local/pc/Bureau/SMQ-ROYAL-AIR-MAROC/client/node_modules/formidable/src/parsers/Querystring.js"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\nconst querystring = require('querystring');\n\n// This is a buffering parser, not quite as nice as the multipart one.\n// If I find time I'll rewrite this to be fully streaming as well\nclass QuerystringParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.globalOptions = { ...options };\n    this.buffer = '';\n    this.bufferLength = 0;\n  }\n\n  _transform(buffer, encoding, callback) {\n    this.buffer += buffer.toString('ascii');\n    this.bufferLength = this.buffer.length;\n    callback();\n  }\n\n  _flush(callback) {\n    const fields = querystring.parse(this.buffer, '&', '=');\n    // eslint-disable-next-line no-restricted-syntax, guard-for-in\n    for (const key in fields) {\n      this.push({\n        key,\n        value: fields[key],\n      });\n    }\n    this.buffer = '';\n    callback();\n  }\n}\n\nmodule.exports = QuerystringParser;\n"],"mappings":"AAAA;AAEA;;AAEA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,QAAD,CAA7B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B,C,CAEA;AACA;;;AACA,MAAME,iBAAN,SAAgCH,SAAhC,CAA0C;EACxCI,WAAW,GAAe;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACxB,MAAM;MAAEC,kBAAkB,EAAE;IAAtB,CAAN;IACA,KAAKC,aAAL,GAAqB,EAAE,GAAGF;IAAL,CAArB;IACA,KAAKG,MAAL,GAAc,EAAd;IACA,KAAKC,YAAL,GAAoB,CAApB;EACD;;EAEDC,UAAU,CAACF,MAAD,EAASG,QAAT,EAAmBC,QAAnB,EAA6B;IACrC,KAAKJ,MAAL,IAAeA,MAAM,CAACK,QAAP,CAAgB,OAAhB,CAAf;IACA,KAAKJ,YAAL,GAAoB,KAAKD,MAAL,CAAYM,MAAhC;IACAF,QAAQ;EACT;;EAEDG,MAAM,CAACH,QAAD,EAAW;IACf,MAAMI,MAAM,GAAGd,WAAW,CAACe,KAAZ,CAAkB,KAAKT,MAAvB,EAA+B,GAA/B,EAAoC,GAApC,CAAf,CADe,CAEf;;IACA,KAAK,MAAMU,GAAX,IAAkBF,MAAlB,EAA0B;MACxB,KAAKG,IAAL,CAAU;QACRD,GADQ;QAERE,KAAK,EAAEJ,MAAM,CAACE,GAAD;MAFL,CAAV;IAID;;IACD,KAAKV,MAAL,GAAc,EAAd;IACAI,QAAQ;EACT;;AAzBuC;;AA4B1CS,MAAM,CAACC,OAAP,GAAiBnB,iBAAjB"},"metadata":{},"sourceType":"script"}